name: "seattle-2025"
x-image: &image
  image: ghcr.io/worldconvotingsystems/seattle-2025:${NOMNOM_VERSION:-main}
x-boot: &boot
  depends_on:
    boot:
      condition: service_completed_successfully
x-redis: &redis
  NOM_REDIS_HOST: redis
  NOM_REDIS_PORT: 6379
x-db: &db
  NOM_DB_HOST: pgbouncer
  NOM_DB_PORT: 5432
  NOM_DB_NAME: $NOM_DB_NAME
  NOM_DB_USER: $NOM_DB_USER
  NOM_DB_PASSWORD: $NOM_DB_PASSWORD
x-staticfiles: &staticfiles
  NOM_STATIC_FILE_ROOT: /staticfiles

services:
  web:
    <<: [*image, *boot]
    volumes:
      - staticfiles:/staticfiles
    ports:
      - "127.0.0.1:8000:8000"
    command: bash /app/docker/start.sh server
    links:
      - pgbouncer
      - redis
    env_file:
      - .env
    environment:
      <<: [*db, *redis, *staticfiles]
    healthcheck:
      start_period: 30s
      start_interval: 2s
      interval: 30s
      timeout: 5s
      retries: 3
      test:
        [
          "CMD",
          "/bin/bash",
          "-c",
          "set -o pipefail; curl -s --fail -H 'Host: nomnom-staging.seattlein2025.org' http://localhost:8000/watchman/ | jq --exit-status '.databases[].default.ok == true' > /dev/null",
        ]

  worker:
    <<: [*image, *boot]
    command: /app/docker/start.sh worker
    links:
      - pgbouncer
      - redis
    env_file:
      - .env
    environment:
      <<: [*db, *redis, *staticfiles]

  scheduler:
    <<: [*image, *boot]
    command: /app/docker/start.sh beat
    links:
      - db
      - redis
    env_file:
      - .env
    environment:
      <<: [*db, *redis, *staticfiles]
    volumes:
      - staticfiles:/staticfiles:ro

  boot:
    <<: *image
    command: /bin/bash /app/docker/start.sh bootstrap
    user: root
    environment:
      <<: [*db, *redis, *staticfiles]
    env_file:
      - .env
    volumes:
      - staticfiles:/staticfiles
    depends_on:
      pgbouncer:
        condition: service_healthy
      db:
        condition: service_healthy
    links:
      - pgbouncer
      - redis

  pgbouncer:
    image: edoburu/pgbouncer
    restart: always
    volumes:
      - ./pgbouncer:/etc/pgbouncer:ro
    ports:
      - 5432
    environment:
      - POSTGRES_PASSWORD=${NOM_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost"]

  db:
    image: postgres:17.1
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432
    environment:
      - POSTGRES_DB=${NOM_DB_NAME}
      - POSTGRES_USER=${NOM_DB_USER}
      - POSTGRES_PASSWORD=${NOM_DB_PASSWORD}
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready", "-d", "$NOM_DB_NAME", "-u", "$NOM_DB_USER"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  redis:
    image: redis:7
    ports:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "_ping"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 5s

  # This container and Dozzle provide a logging endpoint access over my personal tailnet,
  # so that I can view the container logs on this host without ssh as needed.
  tailscale-sidecar:
    hostname: nomnom-seattle2025-staging-logs
    volumes:
      - tailscale-data:/var/lib/tailscale
    devices:
      - /dev/net/tun
    cap_add: # Required for tailscale to work
      - net_admin
      - sys_module
    environment:
      - TS_SERVE_PORT=8080
    image: ghcr.io/offbyone/sidecar:main

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    network_mode: "service:tailscale-sidecar"
    restart: unless-stopped
    environment:
      DOZZLE_HOSTNAME: "nomnom-seattle2025-staging-logs"
      DOZZLE_AUTH_PROVIDER: forward-proxy
      DOZZLE_AUTH_HEADER_USER: "Tailscale-User-Login"
      DOZZLE_AUTH_HEADER_NAME: "Tailscale-User-Name"
      DOZZLE_ENABLE_ACTIONS: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db-data:
  staticfiles:
  tailscale-data:
